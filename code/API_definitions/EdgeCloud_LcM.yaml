openapi: 0.1.0
info:
  title: Edge Cloud API
  description:  |

    Edge Cloud API for artifact managment, application management and resource management.  
    # Introduction
    APIs defined in this version of the specification can be categorized into the following areas:
    * __Application Management__ - Deploy and remove applications within artifacts
    * __Application Artifacts Management__ - Management of application descriptors, binaries, charts and packages 
    * __MEC Platform information__ - Retrieves all the Edge nodes available according to some defined parameters
    
    # Relevant terms and definitions
    This section provides definitions of terminologies commonly referred to throughout the API descriptions.

    * __Application Provider__ - An application developer, onboarding his/her edge application on operator platform (MEC).    
    * __Artifact__ - Descriptor, binary image, charts or any other package assosiated with the application.
    * __OP__ - Operator Platform.
    * __Region__ - Human readable name of the geografical zone of the MEC. Defined by the OP.
    
    # API Functionality
    __Application Management__
    * __onboardApplication__ - Submits an application details to an OP. Based on the details provided,  OP shall do bookkeeping, resource validation and other pre-deployment operations. 
    * __removeApplication__ - Removes an application from an OP

    __Application Artifacts Management__
    * __onboardArtifact__  Submits an artifact to operator platform
    * __removeArtifact__  Removes an artifact from operator platform
    
    __MEC Platform information__
    *  __retrieveEdgeNodes__ List of the operator’s MECs and their status, ordering the results by location and filtering by status (active/inactive/unknown)
       
    # Further info and support
  
    (FAQs will be added in a later version of the documentation)

  termsOfService: http://swagger.io/terms/
  contact:
    email: sp-edc@lists.camaraproject.org
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Product documentation at Camara
  url: https://github.com/camaraproject/

servers:
  - url: "{apiRoot}/{basePath}"
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root
      basePath:
        default: edge-cloud/v1
        description: Base path for the Edge Cloud API

security:
  - oAuth2ClientCredentials: 
    - nbi-mgmt

tags:
  - name: Applications
    description: Manage of Applications
  - name: Application Artifacts 
    description: Manage of Artifacts
  - name: Mobile Edge Cloud Platform
    description: Mobile Edge Nodes Available

paths:
  /app:
    post: 
      tags:
        - Applications
      summary: Deploy an application 
      description: Ask the operator to provision an application to one or several Edge Application Servers taking into account resources (e.g. vCPU, Memory, network interfaces, storage, GPU) 
      operationId: appProvisioning
      requestBody:
        description: Details about application and zones where application instance should be instantiated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppProvisioning'
        required: true      
      responses:
        '201':
          description: Application provisioned
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref:  '#/components/schemas/DeployedApp'
                minItems: 1                 
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
              example:
                status: 409
                code: CONFLICT
                message: "Application already deployed"
        '500':
          $ref: '#/components/responses/500'
        '501':
          $ref: '#/components/responses/501'
        '503':
          $ref: '#/components/responses/503'

  /app/{appId}:
    delete:
      tags:
        - Applications
      summary: Terminate an Application
      description: Terminate the running instance of an application in one or several Edge Application Servers
      operationId: deleteApplication
      parameters:
        - name: appId
          in: path
          description: Identificator of the application generated by the OP NBI once the provisioning was successful
          required: true
          schema:
            $ref: "#/components/schemas/AppId"
        - name: edgeResourceName
          in: query
          description: Identificator of the specific edge node where de application will be terminated
          required: false
          schema:
            $ref: "#/components/schemas/EdgeResource"
        - name: regionId
          in: query
          description: Identificator of the specific zone where de application will be terminated
          required: false
          schema:
            $ref: "#/components/schemas/RegionId"
        
      responses:
        '204':
          description: Application deleted      
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'

  /artifact:
    post:
      tags:  
        - Application Artifacts 
      summary: Uploads artifact  on an OP.                       
      description: Artifact is a zip file containing  scripts and/or packaging files like Terraform or Helm which are required to create an instance of an application.
      operationId: uploadArtifact
      requestBody:
        description: An application can consist of multiple components. App providers are allowed to define seperate artifacts for each component  
                            or  they could define a consolidated artifact at application level. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArtifactDetails'
        required: true
      responses:
        '201':
          description: Artifact uploaded successfully
          content: 
            application/json:
              schema:
                $ref:  '#/components/schemas/UploadedArtifact'                
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
              example:
                status: 409
                code: CONFLICT
                message: "Artifacf duplicated"
        '500':
          $ref: '#/components/responses/500'
        '501':
          $ref: '#/components/responses/501'
        '503':
          $ref: '#/components/responses/503'       

  /artifact/{artifactId}:
    delete:
      tags:
        - Application Artifacts
      summary: Delete an artifact from an OP
      description: Delete an artifact
      operationId: deleteArtifact
      parameters:
        - name: artifactId
          in: path
          description: Identificator of the artifact to be deleted provided by the OP NBI once the uploading was successful
          required: true
          schema:
            $ref: "#/components/schemas/ArtifactId"

      responses:
        '204':
          description: Artifact deleted
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
              example:
                status: 409
                code: CONFLICT
                message: "Artifact with a running application cannot be deleted"
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'

  /edgeCloudPlatform:
    get:
      tags: 
        - Mobile Edge Cloud Platform
      summary: Retrieve a list of the operator’s MECs and their status
      description: List of the operator’s MECs and their status, ordering the results by location and filtering by status (active/inactive/unknown)
      operationId: getMecPlatforms
      parameters:
        - name: regionId
          description: Human readable name of the geografical zone of the MEC. Defined by the OP.
          in: query
          required: false
          schema: 
              $ref: '#/components/schemas/RegionId'
        - name: status
          in: query
          required: false
          schema: 
              $ref: '#/components/schemas/Status'
      responses:
        '200':
          description: Available MEC Platforms 
          content:
            application/json:
              schema:
                type: array
                items:                  
                  $ref: '#/components/schemas/MecDetails'
                minItems: 1
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'

components:
  securitySchemes:
    oAuth2ClientCredentials:
      type: oauth2
      flows: 
        clientCredentials: 
          tokenUrl: '/oauth2/token'
          scopes:
            nbi-mgmt: Access to the APIs
  
  schemas:
    AppId:
      type: string
      format: uuid
      description: A globally unique identifier assosiated with the artifact. Originating OP generates this identifier when artifact is submitted over NBI.
       
    AppProviderId:
      type: string
      pattern: ^[A-Za-z][A-Za-z0-9_]{7,63}$
      description: UserId of the app provider.  Identifier is relevant only in context of federation.
    
    AppProvisioning:
      description: Attributes required to provision an application
      type: object
      properties:
        artifactId:
          $ref: '#/components/schemas/ArtifactId'
        appVersion:
          $ref: '#/components/schemas/AppVersion'
        appProviderId:
          $ref: '#/components/schemas/AppProviderId' 
        edgeResource:
          $ref: '#/components/schemas/EdgeResource'
        regionId:
          $ref: '#/components/schemas/RegionId'
      required:
        - artifactId
    
    AppVersion:
      type: string
      pattern:  ^(\d{1,2}\.)?(\d{1,2}\.)?(\d{1,2})$
      description: Versioning info in the format major.minor.patch
     
    ArtifactId:
      type: string
      pattern: 6sa85a64-5117-3562-c3fd-2c913a66aba1
      description: A globally unique identifier assosiated with the artifact. Originating OP generates this identifier when artifact is submitted over NBI.

    ArtifactDetails:
      properties:
        name:
          type: string
          pattern: ^[A-Za-z][A-Za-z0-9_]{7,31}$
          description: Name of the artifact. 
        
        version:
          type: string
          pattern: ^(\d{1,2}\.)?(\d{1,2}\.)?(\d{1,2})$
          description: Artifact version information
        
        virtType:
          type: string
          enum:
            - VM_TYPE
            - CONTAINER_TYPE

        fileName:
          type: string
          minLength:  8
          maxLength: 32
          description: Name of the file.  
                    
        fileFormat:
          type: string
          enum:
            - WINZIP
            - TAR
            - TEXT
            - TARGZ
          description: Artifacts like Helm charts or Terraform scripts may need compressed format.
                    
        descriptorType:
          type: string
          enum:
            - HELM
            - TERRAFORM
            - ANSIBLE
            - SHELL      
            - COMPONENTSPEC
          description: Type of descriptor present in the artifact.  App provider can either define either a HELM chart or a Terrform script or container spec.
        
        repository:       
          type: object
          required:
            - type
            - url
          properties:
            type:                 
              type: string
              enum:
                - PRIVATEREPO
                - PUBLICREPO
                - UPLOAD
              description: Artifact repository location. PUBLICREPO is used of public urls like github, helm repo etc, 
                                  PRIVATEREPO  is used for private repo managed by the application developer,
                                  UPLOAD is for the case when artifact is uploaded from MEC web portal.
            url:
              $ref: '#/components/schemas/Uri'
            userName:
              type: string
              pattern: ^[A-Za-z][A-Za-z0-9_]{7,63}$
              description:  Username to acces the artifact repository
            password:
              type: string      
              description:  Password to acces the artifact repository
            token:
              type: string          
              description:  Authorization token acces the artifact repository   
          
        componentSpec:
          description: Details about compute, networking and storage requirements for each component of the application.  
                              App provider should  define all information needed to instantiate the component. 
                              If artifact is being defined at component level  this section should have information just about the component. 
                              In case the artifact is being defined at application level  the section should provide details about all the components.
          type: array
          items:
            type: object
            required:
              - componentName
              - operatingSystem
              - cpuArchitecture
              - images
              - networkInterfaces
              - numOfInstances
              - restartPolicy
            properties:
              componentName: 
                type: string
                pattern:  ^[A-Za-z0-9][A-Za-z0-9_]{6,62}[A-Za-z0-9]$
                description: Must be a valid RFC 1035 label name.  Component name must be unique with an application
              operatingSystem:
                $ref: '#/components/schemas/OperatingSystem'
              cpuArchitecture:
                $ref: '#/components/schemas/CpuArchType'
              images:
                description: List of all images assosiated with the component. Images are uploaded or specified using UploadFile apis
                type: array
                items: 
                  $ref: '#/components/schemas/FileId' 
                minItems: 1
              networkInterfaces:
                description: Each application component exposes some ports either for external users or for inter component communication.
                                    Application provider is required to specify which ports are to be exposed and the type of traffic that will flow through these ports.

                type: array
                items:                          
                  type: object
                  required:
                    - interfaceId
                    - protocol
                    - port
                    - network
                    - interfaceName
                    - visibilityType
                  properties:
                    interfaceId:
                      type: string
                      description:  Each Port and corresponding traffic protocol exposed by the component is identified by a name. 
                                            Application client on user device requires this to uniquley idenify the interface. 
                      pattern: ^[A-Za-z0-9][A-Za-z0-9_]{6,30}[A-Za-z0-9]$
                    network:
                      type: string
                      pattern: ^[A-Za-z][A-Za-z0-9_]{6,30}[A-Za-z0-9]$
                      description: Name of the network.  In case the application has to be assoisated with more then 1 network then app provider
                                          must define the name of the network on which this interface has to be exposed.  This parameter is required only if 
                                          the port has to be exposed on a specific network other then default.
                    protocol:
                      type: string
                      enum:
                        - TCP
                        - UDP
                        - HTTP/HTTPS
                      description: Defines the IP transport communication protocol i.e., TCP, UDP or HTTP
                    port:
                      type: integer
                      format: int32
                      minimum: 1
                      maximum: 65535
                      description: Port number exposed by the component. OP may generate a dynamic port towards the UCs 
                                          corresponding to this internal port and forward the client traffic from dynamic port to containerPort.
                    interfaceName:
                      type: string
                      pattern: ^[a-z][a-z0-9]{3}$
                      description:  Interface Name. Required only if application has to be attatched to a network other then default.
                    visibilityType:
                      description: Defines whether the interface is exposed to outer world or not i.e., external, or internal.
                                          If this is set to "external", then it is  exposed to external applications otherwise it is exposed 
                                          internally to edge application components within edge cloud. When exposed to external world, 
                                          an external dynamic port is assigned for UC traffic and mapped to the internal containerPort
                      type: string
                      enum:
                        - VISIBILITY_EXTERNAL
                        - VISIBILITY_INTERNAL
                minItems: 1                
              numOfInstances:
                type: integer
                format: int32
                description: Number of component instances to be launched. 
              restartPolicy:
                type: string
                enum:
                  - RESTART_POLICY_ALWAYS
                  - RESTART_POLICY_NEVER
                description: How the platform shall handle component failure       
        artifactFile:        
          type: string
          format: binary
          description: Helm archive or Terrafom archive or container spec file.                  
      required:
        - name
        - virtType
        - fileName
        - fileFormat
        - descriptorType
   
    CpuArchType:
          type: string
          enum:
            - x86_64
            - arm_64
          description: CPU Instruction Set Architecture (ISA) E.g., Intel, Arm etc. 
    
    DeployedApp:
      description: Information about the deployed application
      type: object
      properties:
        appId:
          $ref: '#/components/schemas/AppId'
        edgeResourceName:
          $ref: '#/components/schemas/EdgeResource'
  
    EdgeResource:
      description: Edge Resource Name - an identifier for an edge reource in the operator domain 
      type: string

    ErrorInfo:
      type: object
      properties:
        status:
          type: integer
          description: HTTP status code returned along with this error response
        code:
          type: string
          description: Code given to this error
        message:
          type: string
          description: Detailed error description
      required:
        - status
        - code
        - message
    
    FileId:
      type: string
      format: uuid
      description: A globally unique identifier assosiated with the image file. Originating OP generates this identifier when file is uploaded over NBI.

    MecDetails:
      type: object
      required:
        - geolocation
      properties:
        edgeResourceName: 
          $ref: '#/components/schemas/EdgeResource'
        status:
          $ref: '#/components/schemas/Status'
        region:
            $ref: '#/components/schemas/RegionId'

      minItems: 1

    OperatingSystem:
      type: object
      required:
        - architecture
        - family
        - version
        - license
      properties:
        architecture: 
          type: string
          enum:
            - x86_64
            - x86
          example: x86_64  
        family:
          type: string
          enum:
            - RHEL
            - UBUNTU
            - COREOS
            - WINDOWS
            - OTROS
        version:
          type: string
          enum:
            - OS_VERSION_UBUNTU_2204_LTS
            - OS_VERSION_RHEL_8
            - OS_VERSION_RHEL_7
            - OS_VERSION_ DEBIAN_11
            - OS_VERSION_COREOS_STABLE
            - OS_MS_WINDOWS_2012_R2
        license:
          type: string
          enum:
            - OS_LICENSE_TYPE_FREE
            - OS_LICENSE_TYPE_ON_DEMAND

    RegionId:
      type: string
      description:  Human readable name of the geografical zone of the MEC. Defined by the OP.
      enum:
        - North
        - South
        - West
        - East

    Status:
        description: Status of the MEC Platform (default is 'unknown')
        type: string
        enum:
          - active
          - inactive
          - unknown   
        default: unknown 
   
    UploadedArtifact:
      description: Information about the uploaded artifact
      type: object
      properties:
        artifactId:
          $ref: '#/components/schemas/ArtifactId'   
      
    Uri:
      type: string

  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 400
            code: INVALID_ARGUMENT
            message: "Schema validation failed at  ..."     
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 401
            code: UNAUTHENTICATED
            message: "Authorization failed: ..."
    '403':
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 403
            code: PERMISSION_DENIED
            message: "Operation not allowed: ..."
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 404
            code: NOT_FOUND
            message: "Resource does not exist"
    '500':
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 500
            code: INTERNAL
            message: "Internal server error: ..."
    '501':
      description: Not Implemented
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 501
            code: NOT_IMPLEMENTED
            message: "Service not implemented"
    '503':
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 503
            code: UNAVAILABLE
            message: "Service unavailable"
